package main

import (
	"bytes"
	"fmt"
	"os"
	"strings"

	jira "github.com/andygrunwald/go-jira"
	"github.com/golang/glog"
)

var templateBELText = `
h2. Summary
[date, autogenerated suggestion]

h2. Detection
[How the problem was noticed, e.g. "Datadog detected that service X was down and paged on-call via PagerDuty"]

h2. Root cause(s)
* [A list of causes that have contributed to the incident] 
* ...

h2. Mitigating actions
[Steps taken to contain this event (for now)]

h2. Timeline
|| Time || Description ||
| [ HH:mm:ss ] | |
| [ HH:mm:ss ] | |
| [ HH:mm:ss ] | |
| [ HH:mm:ss ] | |
| [ HH:mm:ss ] | |
| [ HH:mm:ss ] | |

h2. Learnings
[What have we learned from this event?]
* [What are the next steps]
* ...
`

type Jira struct {
	Client *jira.Client
}

func (ctx *AppContext) createBELIssue() error {

	issue := jira.Issue{
		Fields: &jira.IssueFields{
			Description: templateBELText,
			Type: jira.IssueType{
				Name: "Event",
			},
			Project: jira.Project{
				Key: "TES",
			},
			Summary: "Delete me, wijnand testing",
		},
	}

	createdIssue, response, err := ctx.Jira.Client.Issue.Create(&issue)

	if err != nil {
		buf := new(bytes.Buffer)
		buf.ReadFrom(response.Body)
		newStr := buf.String()

		glog.Fatal(newStr)
	}
	glog.Infof("%+v\n", createdIssue)

	return nil
}

func initializeJiraClient() (*jira.Client, error) {
	username := os.Getenv("JIRA_USERNAME")
	password := os.Getenv("JIRA_AUTHTOKEN")

	tp := jira.BasicAuthTransport{
		Username: strings.TrimSpace(username),
		Password: strings.TrimSpace(password),
	}

	client, err := jira.NewClient(tp.Client(), "https://mollie.atlassian.net/")
	if err != nil {
		glog.Error(err)
		return nil, err
	}

	return client, nil
}

func (ctx *AppContext) searchBELIssue(searchText string) ([]jira.Issue, error) {
	searchQuery := fmt.Sprintf("project = TES and text ~ %s", searchText)
	issues, _, error := ctx.Jira.Client.Issue.Search(searchQuery, nil)
	if error != nil {
		glog.Error(error)
		return nil, error
	}

	return issues, nil
}
